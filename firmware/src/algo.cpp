#include "algo.h"
#include "sensor.h"
#include <Arduino.h>

// Bi·∫øn to√†n c·ª•c t·ª´ c·∫£m bi·∫øn
extern float temperature;      // ¬∞C
extern float humidity;         // % (ƒë·ªô ·∫©m t∆∞∆°ng ƒë·ªëi)
extern float visibleLux;    // lux
extern float soilMoisture;     // fraction (0-1)
extern float soilTemperature;  // ¬∞C

// Tham s·ªë cho c√† chua trong nh√† k√≠nh
float Kc = 0.8;               // H·ªá s·ªë c√¢y tr·ªìng (0.6-1.2 t√πy giai ƒëo·∫°n)
float SM;                     // ƒê·ªô ·∫©m ƒë·∫•t hi·ªán t·∫°i (mm)
float SM_prev;                // ƒê·ªô ·∫©m ƒë·∫•t tr∆∞·ªõc ƒë√≥ (mm)
float D = 12.0;               // Drainage (mm/day, t∆∞∆°ng ƒë∆∞∆°ng 0.5 mm/h * 24)
float I_needed = 0;           // L∆∞·ª£ng n∆∞·ªõc c·∫ßn t∆∞·ªõi (mm/day)
float theta_fc = 0.35;        // Field Capacity (fraction, ƒë·∫•t s·∫°ch tr·ªôn s·∫µn)
float theta_wp = 0.15;        // Wilting Point (fraction)
float Zr = 0.3;               // ƒê·ªô s√¢u r·ªÖ (m)
float p = 0.5;                // Management Allowed Depletion (ph√π h·ª£p cho c√† chua)
float z = 100;                // ƒê·ªô cao ∆∞·ªõc l∆∞·ª£ng (m√©t)

// Tham s·ªë m√¥ h√¨nh Priestley-Taylor
float ALPHA = 1.26;           // H·ªá s·ªë Priestley-Taylor
float P0 = 101.3;             // √Åp su·∫•t kh√≠ quy·ªÉn ti√™u chu·∫©n t·∫°i m·ª±c n∆∞·ªõc bi·ªÉn (kPa)
float TEMP_REF = 293;         // Nhi·ªát ƒë·ªô tham chi·∫øu (K) ƒë·ªÉ t√≠nh √°p su·∫•t kh√≠ quy·ªÉn
float LAPSE_RATE = 0.0065;    // T·ª∑ l·ªá gi·∫£m nhi·ªát ƒë·ªô theo ƒë·ªô cao (K/m)
float GRAVITY_EXP = 5.26;     // S·ªë m≈© trong c√¥ng th·ª©c t√≠nh √°p su·∫•t kh√≠ quy·ªÉn
float GAMMA_CONST = 0.665e-3; // H·∫±ng s·ªë ƒë·ªÉ t√≠nh psychrometric constant (kPa/¬∞C per kPa)
float LAMBDA_BASE = 2.501;    // Nhi·ªát ·∫©n h√≥a h∆°i c∆° b·∫£n (MJ/kg, t·∫°i 0¬∞C)
float LAMBDA_SLOPE = 2.361e-3;// H·ªá s·ªë ƒëi·ªÅu ch·ªânh nhi·ªát ·∫©n h√≥a h∆°i theo nhi·ªát ƒë·ªô (MJ/kg/¬∞C)
float ES_CONST = 0.6108;      // H·∫±ng s·ªë trong c√¥ng th·ª©c √°p su·∫•t b√£o h√≤a (kPa)
float ES_SLOPE = 17.27;       // H·ªá s·ªë trong c√¥ng th·ª©c √°p su·∫•t b√£o h√≤a
float ES_TEMP_OFFSET = 237.3; // Nhi·ªát ƒë·ªô tham chi·∫øu trong c√¥ng th·ª©c √°p su·∫•t b√£o h√≤a (¬∞C)
float DELTA_CONST = 4098;     // H·∫±ng s·ªë trong c√¥ng th·ª©c t√≠nh delta
float LUX_TO_RN = 0.000198;   // H·ªá s·ªë chuy·ªÉn ƒë·ªïi lux sang MJ/m¬≤/day (1 lux ‚âà 0.000198 MJ/m¬≤/day)
float GREENHOUSE_FACTOR = 0.7; // H·ªá s·ªë ƒëi·ªÅu ch·ªânh b·ª©c x·∫° trong nh√† k√≠nh
float G = 0;                  // Soil heat flux (MJ/m¬≤/day, m·∫∑c ƒë·ªãnh 0 cho daily scale)
float SM_SENSOR_WEIGHT = 0.3; // Tr·ªçng s·ªë c·ªßa SM_sensor khi hi·ªáu ch·ªânh SM (30%)
float SM_MODEL_WEIGHT = 0.7;  // Tr·ªçng s·ªë c·ªßa SM t√≠nh to√°n (70%)
float MIN_I_NEEDED = 3.0;
float RAW_THRESHOLD = 0.7;

// Soil sensors
KalmanState soilMoistureFilter   = {0, 1.0, 0.05, 2.0, false};   // soil moisture (%)
KalmanState soilTempFilter       = {0, 1.0, 0.01, 0.5, false};   // soil temperature (¬∞C)
KalmanState soilPHFilter         = {0,  1.0, 0.01, 0.2, false};   // pH
KalmanState soilECFilter         = {0, 1.0, 0.05, 5.0, false};   // EC (¬µS/cm)
KalmanState soilNFilter          = {0, 1.0, 0.05, 2.0, false};   // Nitrogen (mg/kg)
KalmanState soilPFilter          = {0, 1.0, 0.05, 2.0, false};   // Phosphorus (mg/kg)
KalmanState soilKFilter          = {0, 1.0, 0.05, 2.0, false};   // Potassium (mg/kg)

// Air sensors
KalmanState airHumidityFilter    = {0, 1.0, 0.05, 1.0, false};   // Humidity (%)
KalmanState airTempFilter        = {0, 1.0, 0.01, 0.5, false};   // Air temperature (¬∞C)
KalmanState luxFilter            = {0, 1.0, 0.1, 10.0, false};  // Lux (light intensity)

// ƒê·ªÅ xu·∫•t b√≥n ph√¢n
float urea_kg_ha;    // kg/ha
float urea_g_plant;  // g/c√¢y
float dap_kg_ha;
float dap_g_plant;  
float kcl_kg_ha;
float kcl_g_plant;
String recommendation_text;
bool needs_fertilization;

extern const NutrientThreshold tomatoThreshold;

float kalmanUpdate(KalmanState &state, float measurement) {
  if (!state.initialized) {
    state.x_est = measurement;
    state.P = 1.0f;
    state.initialized = true;
    return state.x_est;
  }

  float K = state.P / (state.P + state.R);
  state.x_est = state.x_est + K * (measurement - state.x_est);
  state.P = (1 - K) * state.P + state.Q;

  return state.x_est;
}

// T√≠nh √°p su·∫•t kh√≠ quy·ªÉn (kPa) d·ª±a tr√™n ƒë·ªô cao
float calculate_P() {
    return P0 * pow((TEMP_REF - LAPSE_RATE * z) / TEMP_REF, GRAVITY_EXP);
}

// T√≠nh psychrometric constant (kPa/¬∞C)
float calculate_gamma() {
    return GAMMA_CONST * calculate_P();
}

// T√≠nh latent heat of vaporization (MJ/kg)
float calculate_lambda(float T) {
    return LAMBDA_BASE - LAMBDA_SLOPE * T;
}

// T√≠nh slope of saturation vapor pressure curve (kPa/¬∞C)
float calculate_delta(float T) {
    float es = ES_CONST * exp(ES_SLOPE * T / (T + ES_TEMP_OFFSET));
    return DELTA_CONST * es / pow(T + ES_TEMP_OFFSET, 2);
}

// T√≠nh ET0 b·∫±ng Priestley-Taylor (mm/day)
float computeET0() {
    float gamma = calculate_gamma();
    float lambda = calculate_lambda(temperature);
    
    // √Åp su·∫•t b√£o h√≤a (es) v√† √°p su·∫•t h∆°i n∆∞·ªõc th·ª±c t·∫ø (ea)
    float es = ES_CONST * exp(ES_SLOPE * temperature / (temperature + ES_TEMP_OFFSET));
    float ea = es * humidity / 100.0;  // S·ª≠ d·ª•ng humidity (%)
    
    float delta = calculate_delta(temperature);
    
    // B·ª©c x·∫° r√≤ng (MJ/m¬≤/day, t·ª´ lux)
    float Rn = visibleLux * LUX_TO_RN * GREENHOUSE_FACTOR;
    
    // ET0 (mm/day)
    float ET0 = ALPHA * (delta / (delta + gamma)) * (Rn - G) / lambda;
    
    if (ET0 < 0) return ET0 = 0;
    return ET0;
}

// C·∫≠p nh·∫≠t ƒë·ªô ·∫©m ƒë·∫•t v√† t√≠nh l∆∞·ª£ng n∆∞·ªõc t∆∞·ªõi
void updateSoilMoisture(bool isScheduledIrrigation) {
    // T√≠nh TAW v√† RAW
    float TAW = (theta_fc - theta_wp) * Zr * 1000.0;  // mm
    float RAW = p * TAW;                              // mm
    
    // Kh·ªüi t·∫°o SM l·∫ßn ƒë·∫ßu t·ª´ soilMoisture
    static bool firstRun = true;
    if (firstRun && soilMoisture >= theta_wp && soilMoisture <= theta_fc) {
        SM = (soilMoisture - theta_wp) / (theta_fc - theta_wp) * TAW;
        firstRun = false;
    } else if (firstRun) {
        SM = TAW * 0.5;  // M·∫∑c ƒë·ªãnh 50% TAW
        firstRun = false;
    }
    
    // L∆∞u SM_prev
    SM_prev = SM;
    
    // T√≠nh ETc
    float ETc = Kc * computeET0();
    
    // T√≠nh I_needed tr∆∞·ªõc khi c·∫≠p nh·∫≠t SM
    if (SM_prev < RAW) {
        I_needed = RAW - SM_prev;
    } else {
        I_needed = 0;
    }

    if (!isScheduledIrrigation && (SM_prev >= RAW_THRESHOLD * RAW || I_needed < MIN_I_NEEDED)) {
        I_needed = 0;
    }
    
    // C·∫≠p nh·∫≠t SM
    SM = SM_prev + I_needed - ETc - D;
    
    // Gi·ªõi h·∫°n SM
    SM = constrain(SM, 0, TAW);
    
    // Hi·ªáu ch·ªânh SM d·ª±a tr√™n soilMoisture
    if (soilMoisture >= theta_wp && soilMoisture <= theta_fc) {
        float SM_sensor = (soilMoisture - theta_wp) / (theta_fc - theta_wp) * TAW;
        SM = SM_MODEL_WEIGHT * SM + SM_SENSOR_WEIGHT * SM_sensor;
    }
    
    // In debug khi t∆∞·ªõi
    Serial.printf("ETc: %.2f mm/day | SM_prev: %.2f mm\n", ETc, SM_prev);
    Serial.printf("TAW: %.2f mm | RAW: %.2f mm\n", TAW, RAW);
    Serial.printf("SM: %.2f mm | I_irrigation: %.2f mm\n", SM, I_needed);
    Serial.printf("Irrigation: %s\n\n", isScheduledIrrigation ? "Scheduled" : "Supplemental");
}

StageFactor getStageFactor(int growthStage) {
  switch(growthStage) {
    case 1: // ∆Ø∆†M M·∫¶M (0-3 tu·∫ßn) - ∆Øu ti√™n P
      return {0.8f, 1.0f, 0.6f, "∆Øu ti√™n P cho r·ªÖ"};
      
    case 2: // SINH TR∆Ø·ªûNG (3-6 tu·∫ßn) - ∆Øu ti√™n N  
      return {1.0f, 0.8f, 0.8f, "∆Øu ti√™n N cho th√¢n l√°"};
      
    case 3: // RA HOA (6-9 tu·∫ßn) - ∆Øu ti√™n P + K
      return {0.6f, 1.0f, 1.0f, "∆Øu ti√™n P + K cho hoa qu·∫£"};
      
    case 4: // NU√îI QU·∫¢ (9+ tu·∫ßn) - ∆Øu ti√™n K
      return {0.6f, 0.8f, 1.2f, "∆Øu ti√™n K cho ch·∫•t l∆∞·ª£ng qu·∫£"};
      
    default:
      return {1.0f, 1.0f, 1.0f, "Giai ƒëo·∫°n kh√¥ng x√°c ƒë·ªãnh"};
  }
}

// H√ÄM T·∫†O TH√îNG B√ÅO
String generateRecommendationText(bool need_N, bool need_P, bool need_K,
                                 bool excess_N, bool excess_P, bool excess_K,
                                 float urea_g, float dap_g, float kcl_g,
                                 int stage, const char* priority) {
  String result = "=== ƒê·ªÄ XU·∫§T B√ìN PH√ÇN - Gƒê " + String(stage) + " ===\n";
  result += "üìä Ng∆∞·ª°ng: N(" + String(tomatoThreshold.N_low, 1) + "-" + String(tomatoThreshold.N_high, 1) + "%) ";
  result += "P(" + String(tomatoThreshold.P_low, 2) + "-" + String(tomatoThreshold.P_high, 2) + "%) ";
  result += "K(" + String(tomatoThreshold.K_low, 1) + "-" + String(tomatoThreshold.K_high, 1) + "%)\n";
  result += "üéØ " + String(priority) + "\n\n";
  
  // ƒê·ªÄ XU·∫§T C·ª§ TH·ªÇ
  if (urea_g > 0) {
    result += "‚Ä¢ Urea: " + String(urea_g, 1) + " g/c√¢y (" + String(urea_g * 25, 0) + " kg/ha)\n";
  }
  if (dap_g > 0) {
    result += "‚Ä¢ DAP: " + String(dap_g, 1) + " g/c√¢y (" + String(dap_g * 25, 0) + " kg/ha)\n";
  }
  if (kcl_g > 0) {
    result += "‚Ä¢ KCl: " + String(kcl_g, 1) + " g/c√¢y (" + String(kcl_g * 25, 0) + " kg/ha)\n";
  }
  
  // C·∫¢NH B√ÅO TH·ª™A DINH D∆Ø·ª†NG
  if (excess_N || excess_P || excess_K) {
    result += "\n‚ö†Ô∏è C·∫¢NH B√ÅO TH·ª™A: ";
    if (excess_N) result += "N ";
    if (excess_P) result += "P ";
    if (excess_K) result += "K ";
    result += "- NG·ª™NG B√ìN\n";
  }
  
  // TR∆Ø·ªúNG H·ª¢P ƒê·ª¶ DINH D∆Ø·ª†NG
  if (!need_N && !need_P && !need_K && !excess_N && !excess_P && !excess_K) {
    result += "‚úÖ ƒê·ª¶ DINH D∆Ø·ª†NG - Kh√¥ng c·∫ßn b√≥n ph√¢n\n";
  }
  
  // KHUY·∫æN NGH·ªä B·ªî SUNG
  result += "\nüí° KHUY·∫æN NGH·ªä: ";
  if (stage == 1 && need_P) result += "Chia nh·ªè li·ªÅu DAP, t∆∞·ªõi g·ªëc";
  else if (stage == 2 && need_N) result += "Chia 2 l·∫ßn b√≥n, c√°ch nhau 7 ng√†y";
  else if (stage == 3 && (need_P || need_K)) result += "B√≥n tr∆∞·ªõc khi ra hoa r·ªô";
  else if (stage == 4 && need_K) result += "B√≥n KCl ƒë·ªÉ tƒÉng ch·∫•t l∆∞·ª£ng qu·∫£";
  else result += "Theo d√µi ƒë·ªãnh k·ª≥ 7 ng√†y/l·∫ßn";
  
  return result;
}

void analyzeNutrientNeeds() {
  // L·∫•y h·ªá s·ªë giai ƒëo·∫°n sinh tr∆∞·ªüng
  StageFactor factor = getStageFactor(growthStage);

  // Ph√¢n t√≠ch tr·∫°ng th√°i dinh d∆∞·ª°ng
  bool need_N = (soilN < tomatoThreshold.N_low);
  bool need_P = (soilP < tomatoThreshold.P_low);
  bool need_K = (soilK < tomatoThreshold.K_low);
  
  bool excess_N = (soilN > tomatoThreshold.N_high);
  bool excess_P = (soilP > tomatoThreshold.P_high);
  bool excess_K = (soilK > tomatoThreshold.K_high);

  // LI·ªÄU L∆Ø·ª¢NG C∆† B·∫¢N (kg/ha)
  float base_urea = 0, base_dap = 0, base_kcl = 0;
  
  // T√≠nh to√°n li·ªÅu l∆∞·ª£ng d·ª±a tr√™n nhu c·∫ßu
  if (need_N && !excess_N) {
    base_urea = 100.0f; // kg/ha c∆° b·∫£n
  }
  if (need_P && !excess_P) {
    base_dap = 50.0f;   // kg/ha c∆° b·∫£n  
  }
  if (need_K && !excess_K) {
    base_kcl = 80.0f;   // kg/ha c∆° b·∫£n
  }

   // √ÅP D·ª§NG H·ªÜ S·ªê GIAI ƒêO·∫†N
  urea_kg_ha = base_urea * factor.urea_factor;
  dap_kg_ha = base_dap * factor.dap_factor;
  kcl_kg_ha = base_kcl * factor.kcl_factor;

  // QUY ƒê·ªîI SANG G/C√ÇY (m·∫≠t ƒë·ªô 25,000 c√¢y/ha)
  urea_g_plant = urea_kg_ha * 1000 / 25000;
  dap_g_plant = dap_kg_ha * 1000 / 25000;
  kcl_g_plant = kcl_kg_ha * 1000 / 25000;

   // L√ÄM TR√íN ƒê·∫æN 1 S·ªê TH·∫¨P PH√ÇN
  urea_g_plant = round(urea_g_plant * 10) / 10;
  dap_g_plant = round(dap_g_plant * 10) / 10; 
  kcl_g_plant = round(kcl_g_plant * 10) / 10;

  recommendation_text = generateRecommendationText(
    need_N, need_P, need_K, excess_N, excess_P, excess_K,
    urea_g_plant, dap_g_plant, kcl_g_plant,
    growthStage, factor.priority_note
  );

  needs_fertilization = (base_urea > 0 || base_dap > 0 || base_kcl > 0);
}