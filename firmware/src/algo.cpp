#include "algo.h"
#include "sensor.h"
#include <Arduino.h>

// Bi·∫øn to√†n c·ª•c t·ª´ c·∫£m bi·∫øn
extern float temperature;      // ¬∞C
extern float humidity;         // % (ƒë·ªô ·∫©m t∆∞∆°ng ƒë·ªëi)
extern float visibleLux;    // lux
extern float soilMoisture;     // fraction (0-1)
extern float soilTemperature;  // ¬∞C
extern int soilN;
extern int soilP;
extern int soilK;
extern uint8_t growthStage;

// Tham s·ªë cho c√† chua trong nh√† k√≠nh
float Kc = 0.8;               // H·ªá s·ªë c√¢y tr·ªìng (0.6-1.2 t√πy giai ƒëo·∫°n)
float SM;                     // ƒê·ªô ·∫©m ƒë·∫•t hi·ªán t·∫°i (mm)
float SM_prev;                // ƒê·ªô ·∫©m ƒë·∫•t tr∆∞·ªõc ƒë√≥ (mm)
float D;               // Drainage (mm/day, t∆∞∆°ng ƒë∆∞∆°ng 0.5 mm/h * 24)
float I_needed = 0;           // L∆∞·ª£ng n∆∞·ªõc c·∫ßn t∆∞·ªõi (mm/day)
float theta_fc = 0.35;        // Field Capacity (fraction, ƒë·∫•t s·∫°ch tr·ªôn s·∫µn)
float theta_wp = 0.15;        // Wilting Point (fraction)
float Zr = 0.3;               // ƒê·ªô s√¢u r·ªÖ (m)
float p = 0.5;                // Management Allowed Depletion (ph√π h·ª£p cho c√† chua)
float z = 100;                // ƒê·ªô cao ∆∞·ªõc l∆∞·ª£ng (m√©t)
float LF = 0;

// Soil sensors
KalmanState soilMoistureFilter   = {0, 1.0, 0.05, 2.0, false};   // soil moisture (%)
KalmanState soilTempFilter       = {0, 1.0, 0.01, 0.5, false};   // soil temperature (¬∞C)
KalmanState soilPHFilter         = {0,  1.0, 0.01, 0.2, false};   // pH
KalmanState soilECFilter         = {0, 1.0, 0.05, 5.0, false};   // EC (¬µS/cm)
KalmanState soilNFilter          = {0, 1.0, 0.05, 2.0, false};   // Nitrogen (mg/kg)
KalmanState soilPFilter          = {0, 1.0, 0.05, 2.0, false};   // Phosphorus (mg/kg)
KalmanState soilKFilter          = {0, 1.0, 0.05, 2.0, false};   // Potassium (mg/kg)

// Air sensors
KalmanState airHumidityFilter    = {0, 1.0, 0.05, 1.0, false};   // Humidity (%)
KalmanState airTempFilter        = {0, 1.0, 0.01, 0.5, false};   // Air temperature (¬∞C)
KalmanState luxFilter            = {0, 1.0, 0.1, 10.0, false};  // Lux (light intensity)

float kalmanUpdate(KalmanState &state, float measurement) {
  if (!state.initialized) {
    state.x_est = measurement;
    state.P = 1.0f;
    state.initialized = true;
    return state.x_est;
  }

  float K = state.P / (state.P + state.R);
  state.x_est = state.x_est + K * (measurement - state.x_est);
  state.P = (1 - K) * state.P + state.Q;

  return state.x_est;
}

// T√≠nh √°p su·∫•t kh√≠ quy·ªÉn (kPa) d·ª±a tr√™n ƒë·ªô cao
float calculate_P() {
    return P0 * pow((TEMP_REF - LAPSE_RATE * z) / TEMP_REF, GRAVITY_EXP);
}

// T√≠nh psychrometric constant (kPa/¬∞C)
float calculate_gamma() {
    return GAMMA_CONST * calculate_P();
}

// T√≠nh latent heat of vaporization (MJ/kg)
float calculate_lambda(float T) {
    return LAMBDA_BASE - LAMBDA_SLOPE * T;
}

// T√≠nh slope of saturation vapor pressure curve (kPa/¬∞C)
float calculate_delta(float T) {
    float es = ES_CONST * exp(ES_SLOPE * T / (T + ES_TEMP_OFFSET));
    return DELTA_CONST * es / pow(T + ES_TEMP_OFFSET, 2);
}

// T√≠nh ET0 b·∫±ng Priestley-Taylor (mm/day)
float computeET0() {
    float gamma = calculate_gamma();
    float lambda = calculate_lambda(temperature);
    
    // // √Åp su·∫•t b√£o h√≤a (es) v√† √°p su·∫•t h∆°i n∆∞·ªõc th·ª±c t·∫ø (ea)
    // float es = ES_CONST * exp(ES_SLOPE * temperature / (temperature + ES_TEMP_OFFSET));
    // float ea = es * humidity / 100.0;  // S·ª≠ d·ª•ng humidity (%)
    
    float delta = calculate_delta(temperature);
    
    // B·ª©c x·∫° r√≤ng (MJ/m¬≤/day, t·ª´ lux)
    float Rn = visibleLux * LUX_TO_RN * GREENHOUSE_FACTOR;
    
    // ET0 (mm/day)
    float ET0 = ALPHA * (delta / (delta + gamma)) * (Rn - G) / lambda;
    
    if (ET0 < 0) return ET0 = 0;
    return ET0;
}

float computeLF() {
    float EC_drainage = 5.0 * EC_IRRIGATION;  // Quy t·∫Øc 5:1
    return EC_TARGET / EC_drainage;
}

float computeDrainage(float SM_prev, float TAW) {
    if (SM_prev <= TAW * 0.8f) return 0.0;
    return (SM_prev - TAW * 0.8f) * DRAINAGE_FACTOR;
}

// C·∫≠p nh·∫≠t ƒë·ªô ·∫©m ƒë·∫•t v√† t√≠nh l∆∞·ª£ng n∆∞·ªõc t∆∞·ªõi
void updateSoilMoisture(bool isScheduledIrrigation) {
    // T√≠nh TAW v√† RAW
    float TAW = (theta_fc - theta_wp) * Zr * 1000.0;  // mm
    float RAW = p * TAW;                              // mm
    
    // Kh·ªüi t·∫°o SM l·∫ßn ƒë·∫ßu t·ª´ soilMoisture (chuy·ªÉn ƒë·ªïi % sang fraction)
    static bool firstRun = true;
    float soilMoistureFraction = soilMoisture * MOISTURE_TO_FRACTION;  // % ‚Üí fraction
    if (firstRun && soilMoistureFraction >= theta_wp && soilMoistureFraction <= theta_fc) {
        SM = (soilMoistureFraction - theta_wp) / (theta_fc - theta_wp) * TAW;
        firstRun = false;
    } else if (firstRun) {
        SM = TAW * 0.5;  // M·∫∑c ƒë·ªãnh 50% TAW
        firstRun = false;
    }
    
    // L∆∞u SM_prev
    SM_prev = SM;
    D = computeDrainage(SM_prev, TAW);
    
    // T√≠nh ETc c·∫£i ti·∫øn
    float ETc = computeETcImproved();

    // X·ª≠ l√Ω EC cao (ƒë·∫•t m·∫∑n)
    if (soilEC > EC_THRESHOLD) {
        LF = computeLF();
        handleHighEC(); // Hi·ªÉn th·ªã khuy·∫øn ngh·ªã x·ª≠ l√Ω
        Serial.println("Leaching mode activated!");
    }
    
    // Ph√¢n t√≠ch pH v√† EC v·ªõi Decision Table + Fuzzy Logic
    SoilRecommendation recommendation = generateSoilRecommendation();
    Serial.println(recommendation.detailed_advice);
    
    // L∆∞u tr·ªØ d·ªØ li·ªáu NPK l·ªãch s·ª≠
    storeNPKHistory(soilN, soilP, soilK);
    
    // T√≠nh I_req c∆° b·∫£n
    float theta_t = theta_wp + (SM_prev / (Zr * 1000.0));
    float I_req = ((theta_fc - theta_t) * Zr * 1000.0);

    // √Åp d·ª•ng LF n·∫øu c·∫ßn x·∫£ m·∫∑n
    if (LF > 0.0) {
        float leachingWater = computeLeachingWater(I_req);
        I_req += leachingWater;  // Th√™m n∆∞·ªõc x·∫£ m·∫∑n
        Serial.printf("Leaching: +%.2f mm (LF=%.2f)\n", leachingWater, LF);
    }

    // I_required = b√π deficit + ETc + d·ª± ph√≤ng D
    float I_required = max(0.0f, I_req + ETc + D);
    
    // Quy·∫øt ƒë·ªãnh t∆∞·ªõi th√¥ng minh
    bool canIrrigate = shouldIrrigate();
    bool needsIrrigation = isScheduledIrrigation || SM_prev <= (TAW - RAW) || I_required >= MIN_I_NEEDED;
    
    if (canIrrigate && needsIrrigation) {
        I_needed = I_required;
        Serial.println("‚úÖ Quy·∫øt ƒë·ªãnh t∆∞·ªõi: ƒêi·ªÅu ki·ªán ph√π h·ª£p");
    } else {
        I_needed = 0;
        if (!canIrrigate) {
            Serial.println("‚ùå Kh√¥ng t∆∞·ªõi: ƒêi·ªÅu ki·ªán kh√¥ng ph√π h·ª£p");
        } else {
            Serial.println("‚ÑπÔ∏è Kh√¥ng t∆∞·ªõi: Ch∆∞a c·∫ßn thi·∫øt");
        }
    }
    
    // C·∫≠p nh·∫≠t SM
    SM = SM_prev + I_needed - ETc - D;
    
    // Gi·ªõi h·∫°n SM
    SM = constrain(SM, 0, TAW);
    
    // Hi·ªáu ch·ªânh SM d·ª±a tr√™n soilMoisture (chuy·ªÉn ƒë·ªïi % sang fraction)
    if (soilMoistureFraction >= theta_wp && soilMoistureFraction <= theta_fc) {
        float SM_sensor = (soilMoistureFraction - theta_wp) / (theta_fc - theta_wp) * TAW;
        SM = SM_MODEL_WEIGHT * SM + SM_SENSOR_WEIGHT * SM_sensor;
    }
    
    // In debug t·ªëi ∆∞u
    Serial.println("=== SMART AGRICULTURE STATUS ===");
    Serial.printf("üå°Ô∏è  Soil: %.1f¬∞C | üíß Moisture: %.1f%% | üìä pH: %.2f | ‚ö° EC: %.3f mS/cm\n", 
                  soilTemperature, soilMoisture, soilPH, soilEC);
    Serial.printf("üå± NPK: N=%d P=%d K=%d mg/kg | üìà Stage: %d | üíß Saving: %s\n", 
                  soilN, soilP, soilK, growthStage, isWaterSavingMode() ? "ON" : "OFF");
    Serial.printf("üíß Water: ETc=%.1f mm/day | SM=%.1f mm | Irrigate: %.1f mm\n", 
                  ETc, SM, I_needed);
    Serial.printf("üéØ Decision: %s | Status: %s\n", 
                  isScheduledIrrigation ? "Scheduled" : "Smart", 
                  canIrrigate ? "‚úÖ READY" : "‚ùå BLOCKED");
    Serial.println("================================\n");
}

// ========== C√ÅC H√ÄM M·ªöI CHO T∆Ø·ªöI TH√îNG MINH ==========

// H√†m ki·ªÉm tra ƒëi·ªÅu ki·ªán t∆∞·ªõi th√¥ng minh
bool shouldIrrigate() {
    // Kh√¥ng t∆∞·ªõi n·∫øu ƒë·ªô ·∫©m kh√¥ng kh√≠ qu√° cao (c√≥ th·ªÉ m∆∞a)
    if (humidity > HIGH_HUMIDITY_THRESHOLD) {
        Serial.println("‚ùå Kh√¥ng t∆∞·ªõi: ƒê·ªô ·∫©m cao (>80%)");
        return false;
    }
    
    // Kh√¥ng t∆∞·ªõi n·∫øu nhi·ªát ƒë·ªô ƒë·∫•t qu√° th·∫•p (< 15¬∞C)
    if (soilTemperature < LOW_SOIL_TEMP_THRESHOLD) {
        Serial.println("‚ùå Kh√¥ng t∆∞·ªõi: Nhi·ªát ƒë·ªô ƒë·∫•t th·∫•p (<15¬∞C)");
        return false;
    }
    
    // Kh√¥ng t∆∞·ªõi n·∫øu ƒë·∫•t ƒë√£ ƒë·ªß ·∫©m (tr√°nh √∫ng n∆∞·ªõc) - soilMoisture l√† %
    if (soilMoisture > HIGH_SOIL_MOISTURE_THRESHOLD) {
        Serial.printf("‚ùå Kh√¥ng t∆∞·ªõi: ƒê·∫•t ƒë√£ ƒë·ªß ·∫©m (>%.1f%%)\n", HIGH_SOIL_MOISTURE_THRESHOLD);
        return false;
    }
    
    return true;
}

// H·ªá s·ªë giai ƒëo·∫°n sinh tr∆∞·ªüng cho t∆∞·ªõi n∆∞·ªõc
float getGrowthStageFactor(int growthStage) {
    switch(growthStage) {
        case 1: // ∆Ø∆†M M·∫¶M - √≠t n∆∞·ªõc
            return 0.6f;
        case 2: // SINH TR∆Ø·ªûNG - nhi·ªÅu n∆∞·ªõc
            return 1.2f;
        case 3: // RA HOA - v·ª´a ph·∫£i
            return 1.0f;
        case 4: // NU√îI QU·∫¢ - √≠t n∆∞·ªõc ƒë·ªÉ tƒÉng ch·∫•t l∆∞·ª£ng
            return 0.8f;
        default:
            return 1.0f;
    }
}

// Ki·ªÉm tra ch·∫ø ƒë·ªô ti·∫øt ki·ªám n∆∞·ªõc
bool isWaterSavingMode() {
    // K√≠ch ho·∫°t khi EC cao (ƒë·∫•t m·∫∑n) ho·∫∑c thi·∫øu n∆∞·ªõc
    return (soilEC > EC_THRESHOLD) || (SM < (theta_fc - theta_wp) * Zr * 1000.0 * 0.3);
}

// H·ªá s·ªë ti·∫øt ki·ªám n∆∞·ªõc
float getWaterSavingFactor() {
    return isWaterSavingMode() ? WATER_SAVING_FACTOR : 1.0f;
}

// T√≠nh ETc c·∫£i ti·∫øn
float computeETcImproved() {
    float baseETc = Kc * computeET0();
    
    // ƒêi·ªÅu ch·ªânh theo giai ƒëo·∫°n sinh tr∆∞·ªüng
    float stageFactor = getGrowthStageFactor(growthStage);
    
    // ƒêi·ªÅu ch·ªânh theo nhi·ªát ƒë·ªô ƒë·∫•t
    float tempFactor = 1.0 + (soilTemperature - 25.0) * 0.02;
    tempFactor = constrain(tempFactor, 0.5, 1.5); // Gi·ªõi h·∫°n 0.5-1.5
    
    // √Åp d·ª•ng h·ªá s·ªë ti·∫øt ki·ªám n∆∞·ªõc
    float savingFactor = getWaterSavingFactor();
    
    float finalETc = baseETc * stageFactor * tempFactor * savingFactor;
    
    Serial.printf("ETc: Base=%.2f, Stage=%.2f, Temp=%.2f, Saving=%.2f, Final=%.2f\n", 
                  baseETc, stageFactor, tempFactor, savingFactor, finalETc);
    
    return max(0.0f, finalETc);
}

// ========== X·ª¨ L√ù EC CAO (ƒê·∫§T M·∫∂N) ==========

// T√≠nh t·ª∑ l·ªá x·∫£ m·∫∑n c·∫ßn thi·∫øt
float computeLeachingFraction() {
    if (soilEC <= EC_THRESHOLD) return 0.0f;
    
    // C√¥ng th·ª©c: LF = EC_target / (5 * EC_irrigation)
    // V·ªõi EC_target = 2.0, EC_irrigation = EC hi·ªán t·∫°i
    float EC_irrigation = soilEC;
    float LF = EC_TARGET / (5.0 * EC_irrigation);
    
    // Gi·ªõi h·∫°n LF t·ª´ 0.1 ƒë·∫øn 0.5 (10-50%)
    LF = constrain(LF, 0.1f, 0.5f);
    
    Serial.printf("Leaching: EC=%.2f, LF=%.2f (%.1f%%)\n", soilEC, LF, LF*100);
    return LF;
}

// T√≠nh l∆∞·ª£ng n∆∞·ªõc c·∫ßn ƒë·ªÉ x·∫£ m·∫∑n
float computeLeachingWater(float baseIrrigation) {
    float LF = computeLeachingFraction();
    return baseIrrigation * LF;
}

// Ki·ªÉm tra EC nguy hi·ªÉm
bool isECCritical() {
    return soilEC > EC_CRITICAL_THRESHOLD;
}

// Ki·ªÉm tra EC kh·∫©n c·∫•p
bool isECEmergency() {
    return soilEC > EC_EMERGENCY_THRESHOLD;
}

// L·∫•y tr·∫°ng th√°i EC
String getECStatus() {
    if (isECEmergency()) {
        return "üö® KH·∫®N C·∫§P (EC > 4.0)";
    } else if (isECCritical()) {
        return "‚ö†Ô∏è NGUY HI·ªÇM (EC > 3.0)";
    } else if (soilEC > EC_THRESHOLD) {
        return "‚ö†Ô∏è CAO (EC > 2.5)";
    } else {
        return "‚úÖ B√åNH TH∆Ø·ªúNG";
    }
}

// X·ª≠ l√Ω EC cao
void handleHighEC() {
    Serial.println("=== X·ª¨ L√ù EC CAO ===");
    Serial.println(getECStatus());
    
    if (isECEmergency()) {
        Serial.println("üö® KHUY·∫æN NGH·ªä KH·∫®N C·∫§P:");
        Serial.println("1. Ng·ª´ng b√≥n ph√¢n ngay l·∫≠p t·ª©c");
        Serial.println("2. T∆∞·ªõi x·∫£ m·∫∑n v·ªõi l∆∞·ª£ng n∆∞·ªõc g·∫•p 2-3 l·∫ßn b√¨nh th∆∞·ªùng");
        Serial.println("3. C·∫£i thi·ªán tho√°t n∆∞·ªõc");
        Serial.println("4. S·ª≠ d·ª•ng n∆∞·ªõc t∆∞·ªõi ch·∫•t l∆∞·ª£ng t·ªët");
    } else if (isECCritical()) {
        Serial.println("‚ö†Ô∏è KHUY·∫æN NGH·ªä:");
        Serial.println("1. Gi·∫£m b√≥n ph√¢n");
        Serial.println("2. TƒÉng t·∫ßn su·∫•t t∆∞·ªõi x·∫£ m·∫∑n");
        Serial.println("3. Ki·ªÉm tra ngu·ªìn n∆∞·ªõc t∆∞·ªõi");
    } else if (soilEC > EC_THRESHOLD) {
        Serial.println("‚ÑπÔ∏è THEO D√ïI:");
        Serial.println("1. √Åp d·ª•ng ch·∫ø ƒë·ªô ti·∫øt ki·ªám n∆∞·ªõc");
        Serial.println("2. T∆∞·ªõi x·∫£ m·∫∑n ƒë·ªãnh k·ª≥");
        Serial.println("3. Ki·ªÉm tra EC th∆∞·ªùng xuy√™n");
    }
    Serial.println("==================\n");
}

// ========== DECISION TABLE + FUZZY LOGIC ==========

// T√≠nh to√°n Fuzzy Membership cho pH
FuzzyMembership calculateFuzzyMembership(float ph) {
    FuzzyMembership membership = {0, 0, 0, 0, 0};
    
    // Very Acid (pH < 5.5)
    if (ph < PH_ACID_THRESHOLD) {
        membership.very_acid = 1.0f;
    } else if (ph < PH_ACID_THRESHOLD + FUZZY_OVERLAP) {
        membership.very_acid = (PH_ACID_THRESHOLD + FUZZY_OVERLAP - ph) / FUZZY_OVERLAP;
    }
    
    // Acid (pH 5.5-6.0)
    if (ph >= PH_ACID_THRESHOLD - FUZZY_OVERLAP && ph <= PH_OPTIMAL_LOW + FUZZY_OVERLAP) {
        if (ph <= PH_ACID_THRESHOLD) {
            membership.acid = (ph - (PH_ACID_THRESHOLD - FUZZY_OVERLAP)) / FUZZY_OVERLAP;
        } else if (ph <= PH_OPTIMAL_LOW) {
            membership.acid = 1.0f;
        } else {
            membership.acid = (PH_OPTIMAL_LOW + FUZZY_OVERLAP - ph) / FUZZY_OVERLAP;
        }
    }
    
    // Neutral (pH 6.0-6.5)
    if (ph >= PH_OPTIMAL_LOW - FUZZY_OVERLAP && ph <= PH_OPTIMAL_HIGH + FUZZY_OVERLAP) {
        if (ph <= PH_OPTIMAL_LOW) {
            membership.neutral = (ph - (PH_OPTIMAL_LOW - FUZZY_OVERLAP)) / FUZZY_OVERLAP;
        } else if (ph <= PH_OPTIMAL_HIGH) {
            membership.neutral = 1.0f;
        } else {
            membership.neutral = (PH_OPTIMAL_HIGH + FUZZY_OVERLAP - ph) / FUZZY_OVERLAP;
        }
    }
    
    // Alkaline (pH 6.5-7.5)
    if (ph >= PH_OPTIMAL_HIGH - FUZZY_OVERLAP && ph <= PH_ALKALINE_THRESHOLD + FUZZY_OVERLAP) {
        if (ph <= PH_OPTIMAL_HIGH) {
            membership.alkaline = (ph - (PH_OPTIMAL_HIGH - FUZZY_OVERLAP)) / FUZZY_OVERLAP;
        } else if (ph <= PH_ALKALINE_THRESHOLD) {
            membership.alkaline = 1.0f;
        } else {
            membership.alkaline = (PH_ALKALINE_THRESHOLD + FUZZY_OVERLAP - ph) / FUZZY_OVERLAP;
        }
    }
    
    // Very Alkaline (pH > 7.5)
    if (ph > PH_ALKALINE_THRESHOLD) {
        membership.very_alkaline = 1.0f;
    } else if (ph > PH_ALKALINE_THRESHOLD - FUZZY_OVERLAP) {
        membership.very_alkaline = (ph - (PH_ALKALINE_THRESHOLD - FUZZY_OVERLAP)) / FUZZY_OVERLAP;
    }
    
    return membership;
}

// T√¨m rule ph√π h·ª£p trong Decision Table
DecisionRule findMatchingRule(float ph, float ec) {
    // Decision Table Rules
    DecisionRule rules[] = {
        // pH < 5.5 (Very Acid) - EC ƒë∆°n v·ªã: mS/cm
        {0, 5.5, 0, EC_DECISION_LOW, "B√ìN V√îI", "B√≥n CaCO‚ÇÉ ƒë·ªÉ tƒÉng pH", 1},
        {0, 5.5, EC_DECISION_LOW, EC_DECISION_HIGH, "B√ìN V√îI + R·ª¨A M·∫∂N", "B√≥n v√¥i + t∆∞·ªõi x·∫£ m·∫∑n", 1},
        {0, 5.5, EC_DECISION_HIGH, 10.0, "KH·∫®N C·∫§P", "Ng·ª´ng b√≥n ph√¢n + r·ª≠a m·∫∑n kh·∫©n c·∫•p", 1},
        
        // pH 5.5-6.0 (Acid)
        {5.5, 6.0, 0, EC_DECISION_LOW, "B√ìN V√îI NH·∫∏", "B√≥n √≠t v√¥i ƒë·ªÉ ƒëi·ªÅu ch·ªânh pH", 2},
        {5.5, 6.0, EC_DECISION_LOW, EC_DECISION_HIGH, "B√ìN V√îI + R·ª¨A M·∫∂N", "B√≥n v√¥i + t∆∞·ªõi x·∫£ m·∫∑n", 1},
        {5.5, 6.0, EC_DECISION_HIGH, 10.0, "KH·∫®N C·∫§P", "Ng·ª´ng b√≥n ph√¢n + r·ª≠a m·∫∑n kh·∫©n c·∫•p", 1},
        
        // pH 6.0-6.5 (Optimal)
        {6.0, 6.5, 0, EC_DECISION_LOW, "DUY TR√å", "pH t·ªëi ∆∞u, duy tr√¨ hi·ªán t·∫°i", 3},
        {6.0, 6.5, EC_DECISION_LOW, EC_DECISION_HIGH, "R·ª¨A M·∫∂N", "T∆∞·ªõi x·∫£ m·∫∑n ƒë·ªÉ gi·∫£m EC", 2},
        {6.0, 6.5, EC_DECISION_HIGH, 10.0, "KH·∫®N C·∫§P", "Ng·ª´ng b√≥n ph√¢n + r·ª≠a m·∫∑n kh·∫©n c·∫•p", 1},
        
        // pH 6.5-7.5 (Alkaline)
        {6.5, 7.5, 0, EC_DECISION_LOW, "B√ìN CH·∫§T H·ªÆU C∆†", "B√≥n ph√¢n h·ªØu c∆° ƒë·ªÉ gi·∫£m pH", 2},
        {6.5, 7.5, EC_DECISION_LOW, EC_DECISION_HIGH, "B√ìN H·ªÆU C∆† + R·ª¨A M·∫∂N", "B√≥n h·ªØu c∆° + t∆∞·ªõi x·∫£ m·∫∑n", 1},
        {6.5, 7.5, EC_DECISION_HIGH, 10.0, "KH·∫®N C·∫§P", "Ng·ª´ng b√≥n ph√¢n + r·ª≠a m·∫∑n kh·∫©n c·∫•p", 1},
        
        // pH > 7.5 (Very Alkaline)
        {7.5, 14.0, 0, EC_DECISION_LOW, "B√ìN GYPSUM", "B√≥n gypsum ƒë·ªÉ gi·∫£m pH", 1},
        {7.5, 14.0, EC_DECISION_LOW, EC_DECISION_HIGH, "B√ìN GYPSUM + R·ª¨A M·∫∂N", "B√≥n gypsum + t∆∞·ªõi x·∫£ m·∫∑n", 1},
        {7.5, 14.0, EC_DECISION_HIGH, 10.0, "KH·∫®N C·∫§P", "Ng·ª´ng b√≥n ph√¢n + r·ª≠a m·∫∑n kh·∫©n c·∫•p", 1}
    };
    
    // T√¨m rule ph√π h·ª£p nh·∫•t
    DecisionRule bestRule = {0, 0, 0, 0, "KH√îNG X√ÅC ƒê·ªäNH", "Kh√¥ng c√≥ khuy·∫øn ngh·ªã", 3};
    int bestPriority = 4;
    
    for (int i = 0; i < 15; i++) {
        if (ph >= rules[i].ph_min && ph < rules[i].ph_max &&
            ec >= rules[i].ec_min && ec < rules[i].ec_max &&
            rules[i].priority < bestPriority) {
            bestRule = rules[i];
            bestPriority = rules[i].priority;
        }
    }
    
    return bestRule;
}

// T·∫°o khuy·∫øn ngh·ªã t·ªïng h·ª£p
SoilRecommendation generateSoilRecommendation() {
    SoilRecommendation rec;
    
    // Ph√¢n t√≠ch pH
    FuzzyMembership phFuzzy = calculateFuzzyMembership(soilPH);
    if (phFuzzy.very_acid > FUZZY_STRONG) {
        rec.ph_status = "üö® QU√Å CHUA (pH < 5.5)";
        rec.urgency_level = 1.0f;
    } else if (phFuzzy.acid > FUZZY_MODERATE) {
        rec.ph_status = "‚ö†Ô∏è H∆†I CHUA (pH 5.5-6.0)";
        rec.urgency_level = 0.7f;
    } else if (phFuzzy.neutral > FUZZY_MODERATE) {
        rec.ph_status = "‚úÖ T·ªêI ∆ØU (pH 6.0-6.5)";
        rec.urgency_level = 0.1f;
    } else if (phFuzzy.alkaline > FUZZY_MODERATE) {
        rec.ph_status = "‚ö†Ô∏è H∆†I KI·ªÄM (pH 6.5-7.5)";
        rec.urgency_level = 0.5f;
    } else {
        rec.ph_status = "üö® QU√Å KI·ªÄM (pH > 7.5)";
        rec.urgency_level = 1.0f;
    }
    
    // Ph√¢n t√≠ch EC
    if (soilEC > EC_EMERGENCY_THRESHOLD) {
        rec.ec_status = "üö® EC KH·∫®N C·∫§P (>4.0)";
        rec.urgency_level = max(rec.urgency_level, 1.0f);
    } else if (soilEC > EC_CRITICAL_THRESHOLD) {
        rec.ec_status = "‚ö†Ô∏è EC NGUY HI·ªÇM (>3.0)";
        rec.urgency_level = max(rec.urgency_level, 0.8f);
    } else if (soilEC > EC_THRESHOLD) {
        rec.ec_status = "‚ö†Ô∏è EC CAO (>2.5)";
        rec.urgency_level = max(rec.urgency_level, 0.6f);
    } else {
        rec.ec_status = "‚úÖ EC B√åNH TH∆Ø·ªúNG";
    }
    
    // T√¨m rule ph√π h·ª£p
    DecisionRule rule = findMatchingRule(soilPH, soilEC);
    rec.primary_action = String(rule.action);
    rec.secondary_action = String(rule.recommendation);
    
    // T·∫°o l·ªùi khuy√™n chi ti·∫øt
    rec.detailed_advice = "=== KHUY·∫æN NGH·ªä T·ªîNG H·ª¢P ===\n";
    rec.detailed_advice += "pH: " + rec.ph_status + "\n";
    rec.detailed_advice += "EC: " + rec.ec_status + "\n";
    rec.detailed_advice += "H√†nh ƒë·ªông ch√≠nh: " + rec.primary_action + "\n";
    rec.detailed_advice += "Khuy·∫øn ngh·ªã: " + rec.secondary_action + "\n";
    rec.detailed_advice += "M·ª©c ƒë·ªô kh·∫©n c·∫•p: " + String(rec.urgency_level * 100, 0) + "%\n";
    
    return rec;
}

// L·∫•y tr·∫°ng th√°i pH
String getPHStatus() {
    FuzzyMembership phFuzzy = calculateFuzzyMembership(soilPH);
    
    if (phFuzzy.very_acid > FUZZY_STRONG) {
        return "üö® QU√Å CHUA (pH < 5.5)";
    } else if (phFuzzy.acid > FUZZY_MODERATE) {
        return "‚ö†Ô∏è H∆†I CHUA (pH 5.5-6.0)";
    } else if (phFuzzy.neutral > FUZZY_MODERATE) {
        return "‚úÖ T·ªêI ∆ØU (pH 6.0-6.5)";
    } else if (phFuzzy.alkaline > FUZZY_MODERATE) {
        return "‚ö†Ô∏è H∆†I KI·ªÄM (pH 6.5-7.5)";
    } else {
        return "üö® QU√Å KI·ªÄM (pH > 7.5)";
    }
}

// L·∫•y tr·∫°ng th√°i EC chi ti·∫øt
String getECStatusDetailed() {
    if (soilEC > EC_EMERGENCY_THRESHOLD) {
        return "üö® KH·∫®N C·∫§P (EC > 4.0)";
    } else if (soilEC > EC_CRITICAL_THRESHOLD) {
        return "‚ö†Ô∏è NGUY HI·ªÇM (EC > 3.0)";
    } else if (soilEC > EC_THRESHOLD) {
        return "‚ö†Ô∏è CAO (EC > 2.5)";
    } else {
        return "‚úÖ B√åNH TH∆Ø·ªúNG (EC < 2.5)";
    }
}


// ========== H·ªÜ TH·ªêNG B√ìN PH√ÇN TH√îNG MINH ==========

// L∆∞u tr·ªØ d·ªØ li·ªáu NPK l·ªãch s·ª≠
NPKData npkHistory[NPK_HISTORY_DAYS];
int npkHistoryIndex = 0;

void storeNPKHistory(float N, float P, float K) {
    npkHistory[npkHistoryIndex].N = N;
    npkHistory[npkHistoryIndex].P = P;
    npkHistory[npkHistoryIndex].K = K;
    npkHistory[npkHistoryIndex].timestamp = millis();
    npkHistory[npkHistoryIndex].valid = true;
    
    npkHistoryIndex = (npkHistoryIndex + 1) % NPK_HISTORY_DAYS;
    
    Serial.printf("NPK History stored: N=%.1f, P=%.1f, K=%.1f mg/kg\n", N, P, K);
}

// L·∫•y trung b√¨nh NPK 3 ng√†y g·∫ßn nh·∫•t
NPKData getAverageNPK() {
    NPKData average = {0, 0, 0, 0, false};
    int validCount = 0;
    
    for (int i = 0; i < NPK_HISTORY_DAYS; i++) {
        if (npkHistory[i].valid) {
            average.N += npkHistory[i].N;
            average.P += npkHistory[i].P;
            average.K += npkHistory[i].K;
            validCount++;
        }
    }
    
    if (validCount > 0) {
        average.N /= validCount;
        average.P /= validCount;
        average.K /= validCount;
        average.valid = true;
    }
    
    return average;
}

// L·∫•y d·ªØ li·ªáu v∆∞·ªùn m·∫´u nƒÉng su·∫•t cao
ReferenceGarden getReferenceGarden() {
    ReferenceGarden ref;
    
    // D·ªØ li·ªáu v∆∞·ªùn m·∫´u c√† chua nƒÉng su·∫•t cao
    ref.N_optimal = 5.5f;      // mg/kg
    ref.P_optimal = 0.6f;      // mg/kg
    ref.K_optimal = 3.5f;      // mg/kg
    ref.yield_kg_ha = 80000.0f; // kg/ha
    ref.crop_type = "C√† chua";
    ref.season = "M√πa kh√¥";
    
    return ref;
}

// T√≠nh to√°n nhu c·∫ßu b√≥n ph√¢n
FertilizerRecommendation calculateFertilizerNeeds() {
    FertilizerRecommendation rec;
    
    // L·∫•y d·ªØ li·ªáu trung b√¨nh NPK 3 ng√†y
    NPKData currentNPK = getAverageNPK();
    ReferenceGarden refGarden = getReferenceGarden();
    
    if (!currentNPK.valid) {
        rec.needs_fertilizer = false;
        rec.schedule_text = "Kh√¥ng ƒë·ªß d·ªØ li·ªáu NPK l·ªãch s·ª≠";
        return rec;
    }
    
    // T√≠nh ch√™nh l·ªách NPK
    rec.N_deficit = max(0.0f, refGarden.N_optimal - currentNPK.N);
    rec.P_deficit = max(0.0f, refGarden.P_optimal - currentNPK.P);
    rec.K_deficit = max(0.0f, refGarden.K_optimal - currentNPK.K);
    
    // T√≠nh l∆∞·ª£ng ph√¢n c·∫ßn b√≥n (kg/ha)
    rec.urea_kg_ha = (rec.N_deficit * ABSORPTION_RATE_N) / FERTILIZER_EFFICIENCY * 2.0f;  // Urea ch·ª©a 46% N
    rec.dap_kg_ha = (rec.P_deficit * ABSORPTION_RATE_P) / FERTILIZER_EFFICIENCY * 1.5f;   // DAP ch·ª©a 18% N, 46% P
    rec.kcl_kg_ha = (rec.K_deficit * ABSORPTION_RATE_K) / FERTILIZER_EFFICIENCY * 1.2f;   // KCl ch·ª©a 60% K
    
    // Quy ƒë·ªïi sang g/c√¢y
    rec.urea_g_plant = rec.urea_kg_ha * 1000.0f / PLANT_DENSITY;
    rec.dap_g_plant = rec.dap_kg_ha * 1000.0f / PLANT_DENSITY;
    rec.kcl_g_plant = rec.kcl_kg_ha * 1000.0f / PLANT_DENSITY;
    
    // L√†m tr√≤n
    rec.urea_g_plant = round(rec.urea_g_plant * 10) / 10;
    rec.dap_g_plant = round(rec.dap_g_plant * 10) / 10;
    rec.kcl_g_plant = round(rec.kcl_g_plant * 10) / 10;
    
    // Ki·ªÉm tra c√≥ c·∫ßn b√≥n ph√¢n kh√¥ng
    rec.needs_fertilizer = (rec.N_deficit > 0.5f || rec.P_deficit > 0.1f || rec.K_deficit > 0.5f);
    
    // T·∫°o l·ªãch b√≥n ph√¢n
    rec.schedule_text = "=== L·ªäCH B√ìN PH√ÇN TH√îNG MINH ===\n";
    rec.schedule_text += "D·ª±a tr√™n so s√°nh v·ªõi v∆∞·ªùn m·∫´u nƒÉng su·∫•t cao\n";
    rec.schedule_text += "Chu k·ª≥ b√≥n: 2 tu·∫ßn/l·∫ßn\n\n";
    
    if (rec.needs_fertilizer) {
        rec.schedule_text += "KHUY·∫æN NGH·ªä B√ìN PH√ÇN:\n";
        if (rec.urea_g_plant > 0) {
            rec.schedule_text += "‚Ä¢ Urea: " + String(rec.urea_g_plant, 1) + " g/c√¢y (" + String(rec.urea_kg_ha, 0) + " kg/ha)\n";
        }
        if (rec.dap_g_plant > 0) {
            rec.schedule_text += "‚Ä¢ DAP: " + String(rec.dap_g_plant, 1) + " g/c√¢y (" + String(rec.dap_kg_ha, 0) + " kg/ha)\n";
        }
        if (rec.kcl_g_plant > 0) {
            rec.schedule_text += "‚Ä¢ KCl: " + String(rec.kcl_g_plant, 1) + " g/c√¢y (" + String(rec.kcl_kg_ha, 0) + " kg/ha)\n";
        }
    } else {
        rec.schedule_text += "‚úÖ ƒê·ª¶ DINH D∆Ø·ª†NG - Kh√¥ng c·∫ßn b√≥n ph√¢n\n";
    }
    
    return rec;
}

// T·∫°o l·ªãch b√≥n ph√¢n 6 th√°ng
FertilizerSchedule* generate6MonthSchedule() {
    static FertilizerSchedule schedule[12]; // 6 th√°ng x 2 tu·∫ßn/th√°ng
    
    String months[] = {"Th√°ng 1", "Th√°ng 2", "Th√°ng 3", "Th√°ng 4", "Th√°ng 5", "Th√°ng 6"};
    String fertilizerTypes[] = {"Urea", "DAP", "KCl", "NPK t·ªïng h·ª£p"};
    
    for (int month = 0; month < 6; month++) {
        for (int week = 0; week < 2; week++) {
            int index = month * 2 + week;
            schedule[index].month = months[month];
            schedule[index].week = (week + 1) * 2; // Tu·∫ßn 2, 4
            
            // Ph√¢n b√≥n theo giai ƒëo·∫°n
            if (month < 2) { // Th√°ng 1-2: ∆Ø∆°m m·∫ßm
                schedule[index].fertilizer_type = "DAP";
                schedule[index].amount_kg_ha = 50.0f;
                schedule[index].amount_g_plant = 2.0f;
                schedule[index].application_method = "T∆∞·ªõi g·ªëc";
                schedule[index].notes = "∆Øu ti√™n P cho r·ªÖ";
            } else if (month < 4) { // Th√°ng 3-4: Sinh tr∆∞·ªüng
                schedule[index].fertilizer_type = "Urea";
                schedule[index].amount_kg_ha = 100.0f;
                schedule[index].amount_g_plant = 4.0f;
                schedule[index].application_method = "R·∫£i ƒë·ªÅu";
                schedule[index].notes = "∆Øu ti√™n N cho th√¢n l√°";
            } else { // Th√°ng 5-6: Ra hoa - Nu√¥i qu·∫£
                schedule[index].fertilizer_type = "KCl";
                schedule[index].amount_kg_ha = 80.0f;
                schedule[index].amount_g_plant = 3.2f;
                schedule[index].application_method = "T∆∞·ªõi g·ªëc";
                schedule[index].notes = "∆Øu ti√™n K cho hoa qu·∫£";
            }
        }
    }
    
    return schedule;
}

// ƒê·ªãnh d·∫°ng l·ªãch b√≥n ph√¢n
String formatFertilizerSchedule() {
    FertilizerSchedule* schedule = generate6MonthSchedule();
    String result = "=== L·ªäCH B√ìN PH√ÇN 6 TH√ÅNG ===\n";
    result += "Chu k·ª≥: 2 tu·∫ßn/l·∫ßn\n";
    result += "M·∫≠t ƒë·ªô: 25,000 c√¢y/ha\n\n";
    
    for (int i = 0; i < 12; i++) {
        result += schedule[i].month + " - Tu·∫ßn " + String(schedule[i].week) + ":\n";
        result += "‚Ä¢ Lo·∫°i: " + schedule[i].fertilizer_type + "\n";
        result += "‚Ä¢ L∆∞·ª£ng: " + String(schedule[i].amount_kg_ha, 0) + " kg/ha (" + String(schedule[i].amount_g_plant, 1) + " g/c√¢y)\n";
        result += "‚Ä¢ C√°ch b√≥n: " + schedule[i].application_method + "\n";
        result += "‚Ä¢ Ghi ch√∫: " + schedule[i].notes + "\n\n";
    }
    
    return result;
}

// In ph√¢n t√≠ch b√≥n ph√¢n t·ªëi ∆∞u
void printFertilizerAnalysis() {
    Serial.println("=== üå± FERTILIZER ANALYSIS ===");
    
    // D·ªØ li·ªáu hi·ªán t·∫°i
    NPKData currentNPK = getAverageNPK();
    ReferenceGarden refGarden = getReferenceGarden();
    
    Serial.printf("üìä Current NPK (3d): N=%.1f P=%.1f K=%.1f mg/kg\n", 
                  currentNPK.N, currentNPK.P, currentNPK.K);
    Serial.printf("üéØ Target NPK: N=%.1f P=%.1f K=%.1f mg/kg\n", 
                  refGarden.N_optimal, refGarden.P_optimal, refGarden.K_optimal);
    
    // T√≠nh to√°n nhu c·∫ßu
    FertilizerRecommendation rec = calculateFertilizerNeeds();
    Serial.println(rec.schedule_text);
    
    // L·ªãch 6 th√°ng (ch·ªâ hi·ªÉn th·ªã khi c·∫ßn)
    // if (rec.needs_fertilizer) {
    //     Serial.println("üìÖ 6-MONTH SCHEDULE:");
    //     Serial.println(formatFertilizerSchedule());
    // }
    Serial.println("============================\n");
}